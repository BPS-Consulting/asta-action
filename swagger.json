{
  "openapi": "3.0.0",
  "paths": {
    "/api/v2/assets/{appId}/rule/application/table-data": {
      "get": {
        "operationId": "RuleController_findAllTableData",
        "summary": "Get rules for the given application",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AssetsFilterDTO"
            }
          },
          {
            "required": false,
            "name": "groupBy",
            "in": "query",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "parent",
                "name",
                "status",
                "location",
                "link-rule",
                "rule_type"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get rules UI data for the given application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetTableEntryDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "rule"
        ]
      }
    },
    "/api/v2/assets/{appId}/rule": {
      "get": {
        "operationId": "RuleController_findAllBase",
        "summary": "Get rules for the given application",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get rules for the given application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rule"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "rule"
        ]
      },
      "post": {
        "operationId": "RuleController_create",
        "summary": "Create rule",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssetDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rule"
                }
              }
            }
          }
        },
        "tags": [
          "rule"
        ]
      }
    },
    "/api/v2/assets/{appId}/rule/application": {
      "get": {
        "operationId": "RuleController_findAll",
        "summary": "Get rules for the given application",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AssetsFilterDTO"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "parent",
                "name",
                "status",
                "location",
                "link-rule",
                "rule_type"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get rules for the given application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RuleWithPopulatedParentAndTags"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "rule"
        ]
      }
    },
    "/api/v2/assets/{appId}/rule/{id}": {
      "get": {
        "operationId": "RuleController_findOne",
        "summary": "Get rule with id",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get rule with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rule"
                }
              }
            }
          },
          "404": {
            "description": "Asset not found"
          }
        },
        "tags": [
          "rule"
        ]
      },
      "put": {
        "operationId": "RuleController_update",
        "summary": "Update rule",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rule"
                }
              }
            }
          },
          "400": {
            "description": "ApplicationId and parentId do not match for the given rule"
          }
        },
        "tags": [
          "rule"
        ]
      },
      "delete": {
        "operationId": "RuleController_remove",
        "summary": "Delete rule",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete rule",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Rule does not exist"
          }
        },
        "tags": [
          "rule"
        ]
      }
    },
    "/api/v2/assets/{appId}/rule/import": {
      "post": {
        "operationId": "RuleController_import",
        "summary": "Import rules",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportAssetDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Import rules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "rule"
        ]
      }
    },
    "/api/v2/assets/{appId}/rule/{id}/updateParent": {
      "put": {
        "operationId": "RuleController_updateParent",
        "summary": "Update Assets parent",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetParentDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assets parent updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rule"
                }
              }
            }
          },
          "400": {
            "description": "ApplicationId and parentId do not match for the given asset"
          },
          "401": {
            "description": "The user does not have the required permissions on the new parent"
          }
        },
        "tags": [
          "rule"
        ]
      }
    },
    "/api/v2/assets/{appId}/rule/{id}/tags": {
      "put": {
        "operationId": "RuleController_updateTags",
        "summary": "Update assets tags",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update assets tags",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rule"
                }
              }
            }
          },
          "400": {
            "description": "ApplicationId and parentId do not match for the given asset"
          },
          "404": {
            "description": "Asset does not exist"
          }
        },
        "tags": [
          "rule"
        ]
      }
    },
    "/api/v2/assets/{appId}/rule/application/get-by-name": {
      "get": {
        "operationId": "RuleController_getAssetsByName",
        "summary": "Get assets by name and type for the given application",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "populate",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "parent"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of the best match for a given element, \n\t\t\tif the query is an array of names, provides all the possible matches",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rule"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "rule"
        ]
      }
    },
    "/api/v2/assets/{appId}/dataset/application/table-data": {
      "get": {
        "operationId": "DatasetController_findAllTableData",
        "summary": "Get datasets UI data for the given application",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AssetsFilterDTO"
            }
          },
          {
            "required": false,
            "name": "groupBy",
            "in": "query",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "parent",
                "name",
                "status",
                "location",
                "link-rule",
                "rule_type"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get datasets UI data for the given application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetTableEntryDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "dataset"
        ]
      }
    },
    "/api/v2/assets/{appId}/dataset": {
      "get": {
        "operationId": "DatasetController_findAll",
        "summary": "Get datasets for the given application",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get datasets for the given application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dataset"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "dataset"
        ]
      },
      "post": {
        "operationId": "DatasetController_create",
        "summary": "Create asset",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssetDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create asset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          }
        },
        "tags": [
          "dataset"
        ]
      }
    },
    "/api/v2/assets/{appId}/dataset/application": {
      "get": {
        "operationId": "DatasetController_findAllApplication",
        "summary": "Get datasets for the given application with parent and tags",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AssetsFilterDTO"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "parent",
                "name",
                "status",
                "location",
                "link-rule",
                "rule_type"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get datasets for the given application with parent and tags",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatasetWithPopulatedParentAndTags"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "dataset"
        ]
      }
    },
    "/api/v2/assets/{appId}/dataset/{id}": {
      "get": {
        "operationId": "DatasetController_findOne",
        "summary": "Get dataset with id",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get dataset with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "404": {
            "description": "Asset not found"
          }
        },
        "tags": [
          "dataset"
        ]
      },
      "put": {
        "operationId": "DatasetController_update",
        "summary": "Update dataset",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update dataset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "400": {
            "description": "ApplicationId and parentId do not match for the given asset"
          }
        },
        "tags": [
          "dataset"
        ]
      },
      "delete": {
        "operationId": "DatasetController_remove",
        "summary": "Delete dataset",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete dataset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Asset does not exist"
          }
        },
        "tags": [
          "dataset"
        ]
      }
    },
    "/api/v2/assets/{appId}/dataset/import": {
      "post": {
        "operationId": "DatasetController_import",
        "summary": "Import datasets",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportAssetDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Import datasets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "dataset"
        ]
      }
    },
    "/api/v2/assets/{appId}/dataset/{id}/updateParent": {
      "put": {
        "operationId": "DatasetController_updateParent",
        "summary": "Update Assets parent",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetParentDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assets parent updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "400": {
            "description": "ApplicationId and parentId do not match for the given asset"
          },
          "401": {
            "description": "The user does not have the required permissions on the new parent"
          }
        },
        "tags": [
          "dataset"
        ]
      }
    },
    "/api/v2/assets/{appId}/dataset/{id}/tags": {
      "put": {
        "operationId": "DatasetController_updateTags",
        "summary": "Update assets tags",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update assets tags",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "400": {
            "description": "ApplicationId and parentId do not match for the given asset"
          },
          "404": {
            "description": "Asset does not exist"
          }
        },
        "tags": [
          "dataset"
        ]
      }
    },
    "/api/v2/assets/{appId}/dataset/application/get-by-name": {
      "get": {
        "operationId": "DatasetController_getAssetsByName",
        "summary": "Get assets by name and type for the given application",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "populate",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "parent"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of the best match for a given element, \n\t\t\tif the query is an array of names, provides all the possible matches",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dataset"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "dataset"
        ]
      }
    },
    "/api/v2/assets/{appId}/flow/application/table-data": {
      "get": {
        "operationId": "FlowController_findAllTableData",
        "summary": "Get flows UI data for the given application",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AssetsFilterDTO"
            }
          },
          {
            "required": false,
            "name": "groupBy",
            "in": "query",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "parent",
                "name",
                "status",
                "location",
                "link-rule",
                "rule_type"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get flows UI data for the given application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetTableEntryDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "flow"
        ]
      }
    },
    "/api/v2/assets/{appId}/flow": {
      "get": {
        "operationId": "FlowController_findAllBase",
        "summary": "Get flows for the given application",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get flows for the given application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Flow"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "flow"
        ]
      },
      "post": {
        "operationId": "FlowController_create",
        "summary": "Create asset",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssetDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create asset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flow"
                }
              }
            }
          }
        },
        "tags": [
          "flow"
        ]
      }
    },
    "/api/v2/assets/{appId}/flow/application": {
      "get": {
        "operationId": "FlowController_findAll",
        "summary": "Get flows for the given application",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AssetsFilterDTO"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "parent",
                "name",
                "status",
                "location",
                "link-rule",
                "rule_type"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get flows for the given application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FlowWithPopulatedParentAndTags"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "flow"
        ]
      }
    },
    "/api/v2/assets/{appId}/flow/{id}": {
      "get": {
        "operationId": "FlowController_findOne",
        "summary": "Get flow with id",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get flow with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flow"
                }
              }
            }
          },
          "404": {
            "description": "Asset not found"
          }
        },
        "tags": [
          "flow"
        ]
      },
      "put": {
        "operationId": "FlowController_update",
        "summary": "Update flow",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update flow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flow"
                }
              }
            }
          },
          "400": {
            "description": "ApplicationId and parentId do not match for the given flow"
          }
        },
        "tags": [
          "flow"
        ]
      },
      "delete": {
        "operationId": "FlowController_remove",
        "summary": "Delete flow",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete flow",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Flow does not exist"
          }
        },
        "tags": [
          "flow"
        ]
      }
    },
    "/api/v2/assets/{appId}/flow/{id}/referencing": {
      "get": {
        "operationId": "FlowController_findReferencing",
        "summary": "Get flows referencing the given flow",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get flows referencing the given flow",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Flow"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Asset not found"
          }
        },
        "tags": [
          "flow"
        ]
      }
    },
    "/api/v2/assets/{appId}/flow/import": {
      "post": {
        "operationId": "FlowController_import",
        "summary": "Import Flows",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportAssetDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Import flows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "flow"
        ]
      }
    },
    "/api/v2/assets/{appId}/flow/{id}/updateParent": {
      "put": {
        "operationId": "FlowController_updateParent",
        "summary": "Update Assets parent",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetParentDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assets parent updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flow"
                }
              }
            }
          },
          "400": {
            "description": "ApplicationId and parentId do not match for the given asset"
          },
          "401": {
            "description": "The user does not have the required permissions on the new parent"
          }
        },
        "tags": [
          "flow"
        ]
      }
    },
    "/api/v2/assets/{appId}/flow/{id}/tags": {
      "put": {
        "operationId": "FlowController_updateTags",
        "summary": "Update assets tags",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update assets tags",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flow"
                }
              }
            }
          },
          "400": {
            "description": "ApplicationId and parentId do not match for the given asset"
          },
          "404": {
            "description": "Asset does not exist"
          }
        },
        "tags": [
          "flow"
        ]
      }
    },
    "/api/v2/assets/{appId}/flow/application/get-by-name": {
      "get": {
        "operationId": "FlowController_getAssetsByName",
        "summary": "Get assets by name and type for the given application",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "populate",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "parent"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of the best match for a given element, \n\t\t\tif the query is an array of names, provides all the possible matches",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Flow"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "flow"
        ]
      }
    },
    "/api/v2/assets/{appId}/run-template/application/table-data": {
      "get": {
        "operationId": "RunTemplateController_findAllTableData",
        "summary": "Get run templates UI data for the given application",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AssetsFilterDTO"
            }
          },
          {
            "required": false,
            "name": "groupBy",
            "in": "query",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "parent",
                "name",
                "status",
                "location",
                "link-rule",
                "rule_type"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get run templates UI data for the given application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetTableEntryDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "run-template"
        ]
      }
    },
    "/api/v2/assets/{appId}/run-template": {
      "get": {
        "operationId": "RunTemplateController_findAllBase",
        "summary": "Get run templates for the given application",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get run templates for the given application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RunTemplate"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "run-template"
        ]
      },
      "post": {
        "operationId": "RunTemplateController_create",
        "summary": "Create Run Template",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssetDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create Run Template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunTemplate"
                }
              }
            }
          }
        },
        "tags": [
          "run-template"
        ]
      }
    },
    "/api/v2/assets/{appId}/run-template/application": {
      "get": {
        "operationId": "RunTemplateController_findAll",
        "summary": "Get run templates for the given application",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AssetsFilterDTO"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "parent",
                "name",
                "status",
                "location",
                "link-rule",
                "rule_type"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get run templates for the given application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RunTemplateWithPopulatedParentAndTags"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "run-template"
        ]
      }
    },
    "/api/v2/assets/{appId}/run-template/{id}": {
      "get": {
        "operationId": "RunTemplateController_findOne",
        "summary": "Get runTemplate with id",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get runTemplate with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunTemplate"
                }
              }
            }
          },
          "404": {
            "description": "Asset not found"
          }
        },
        "tags": [
          "run-template"
        ]
      },
      "put": {
        "operationId": "RunTemplateController_update",
        "summary": "Update Run Template",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Run Template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunTemplate"
                }
              }
            }
          },
          "400": {
            "description": "ApplicationId and parentId do not match for the given Run Template"
          }
        },
        "tags": [
          "run-template"
        ]
      },
      "delete": {
        "operationId": "RunTemplateController_remove",
        "summary": "Delete Run Template",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Run Template",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Run Template does not exist"
          }
        },
        "tags": [
          "run-template"
        ]
      }
    },
    "/api/v2/assets/{appId}/run-template/{id}/updateParent": {
      "put": {
        "operationId": "RunTemplateController_updateParent",
        "summary": "Update Assets parent",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetParentDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assets parent updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunTemplate"
                }
              }
            }
          },
          "400": {
            "description": "ApplicationId and parentId do not match for the given asset"
          },
          "401": {
            "description": "The user does not have the required permissions on the new parent"
          }
        },
        "tags": [
          "run-template"
        ]
      }
    },
    "/api/v2/assets/{appId}/run-template/{id}/tags": {
      "put": {
        "operationId": "RunTemplateController_updateTags",
        "summary": "Update assets tags",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update assets tags",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunTemplate"
                }
              }
            }
          },
          "400": {
            "description": "ApplicationId and parentId do not match for the given asset"
          },
          "404": {
            "description": "Asset does not exist"
          }
        },
        "tags": [
          "run-template"
        ]
      }
    },
    "/api/v2/assets/{appId}/run-template/application/get-by-name": {
      "get": {
        "operationId": "RunTemplateController_getAssetsByName",
        "summary": "Get assets by name and type for the given application",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "populate",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "parent"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of the best match for a given element, \n\t\t\tif the query is an array of names, provides all the possible matches",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RunTemplate"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "run-template"
        ]
      }
    },
    "/api/v2/assets/{appId}/form-spec/application/table-data": {
      "get": {
        "operationId": "FormSpecController_findAllTableData",
        "summary": "Get formspec UI data for the given application",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AssetsFilterDTO"
            }
          },
          {
            "required": false,
            "name": "groupBy",
            "in": "query",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "parent",
                "name",
                "status",
                "location",
                "link-rule",
                "rule_type"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get formspec UI data for the given application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetTableEntryDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "formspec"
        ]
      }
    },
    "/api/v2/assets/{appId}/form-spec": {
      "get": {
        "operationId": "FormSpecController_findAllBase",
        "summary": "Get formspecs for the given application",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get formspecs for the given application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormSpec"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "formspec"
        ]
      },
      "post": {
        "operationId": "FormSpecController_create",
        "summary": "Create Form Spec",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssetDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create Form Spec",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormSpec"
                }
              }
            }
          }
        },
        "tags": [
          "formspec"
        ]
      }
    },
    "/api/v2/assets/{appId}/form-spec/application": {
      "get": {
        "operationId": "FormSpecController_findAll",
        "summary": "Get formspecs for the given application",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AssetsFilterDTO"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "parent",
                "name",
                "status",
                "location",
                "link-rule",
                "rule_type"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get formspecs for the given application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormSpecWithPopulatedParentAndTags"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "formspec"
        ]
      }
    },
    "/api/v2/assets/{appId}/form-spec/{id}": {
      "get": {
        "operationId": "FormSpecController_findOne",
        "summary": "Get form specs with id",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get form specs with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormSpec"
                }
              }
            }
          },
          "404": {
            "description": "Asset not found"
          }
        },
        "tags": [
          "formspec"
        ]
      },
      "put": {
        "operationId": "FormSpecController_update",
        "summary": "Update Form Spec",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Form Spec",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormSpec"
                }
              }
            }
          },
          "400": {
            "description": "ApplicationId and parentId do not match for the given Form Spec"
          }
        },
        "tags": [
          "formspec"
        ]
      },
      "delete": {
        "operationId": "FormSpecController_remove",
        "summary": "Delete Form Spec",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Form Spec",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Form Spec does not exist"
          }
        },
        "tags": [
          "formspec"
        ]
      }
    },
    "/api/v2/assets/{appId}/form-spec/{id}/updateParent": {
      "put": {
        "operationId": "FormSpecController_updateParent",
        "summary": "Update Assets parent",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetParentDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assets parent updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormSpec"
                }
              }
            }
          },
          "400": {
            "description": "ApplicationId and parentId do not match for the given asset"
          },
          "401": {
            "description": "The user does not have the required permissions on the new parent"
          }
        },
        "tags": [
          "formspec"
        ]
      }
    },
    "/api/v2/assets/{appId}/form-spec/{id}/tags": {
      "put": {
        "operationId": "FormSpecController_updateTags",
        "summary": "Update assets tags",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update assets tags",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormSpec"
                }
              }
            }
          },
          "400": {
            "description": "ApplicationId and parentId do not match for the given asset"
          },
          "404": {
            "description": "Asset does not exist"
          }
        },
        "tags": [
          "formspec"
        ]
      }
    },
    "/api/v2/assets/{appId}/form-spec/application/get-by-name": {
      "get": {
        "operationId": "FormSpecController_getAssetsByName",
        "summary": "Get assets by name and type for the given application",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "populate",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "parent"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of the best match for a given element, \n\t\t\tif the query is an array of names, provides all the possible matches",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormSpec"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "formspec"
        ]
      }
    },
    "/api/v2/auth/whoami": {
      "get": {
        "operationId": "AuthController_getPermissions",
        "summary": "Get permissions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get all the permissions available to the authenticated user"
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/api/v2/auth/logout": {
      "post": {
        "operationId": "AuthController_logOut",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/api/v2/run": {
      "get": {
        "operationId": "RunsController_getRuns",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List runs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RunMetadataDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "run"
        ]
      }
    },
    "/api/v2/run/{id}": {
      "get": {
        "operationId": "RunsController_getVariantRuns",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "default": 50,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search for runs against a variant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRunDTO"
                }
              }
            }
          }
        },
        "tags": [
          "run"
        ]
      }
    },
    "/api/v2/run/variant/{id}/hasRuns": {
      "get": {
        "operationId": "RunsController_hasRuns",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "run"
        ]
      }
    },
    "/api/v2/run/{runId}/currentPage": {
      "get": {
        "operationId": "RunsController_getCurrentPage",
        "parameters": [
          {
            "name": "runId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a run's current page.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageDTO"
                }
              }
            }
          }
        },
        "tags": [
          "run"
        ]
      }
    },
    "/api/v2/run/{variantId}": {
      "delete": {
        "operationId": "RunsController_remove",
        "parameters": [
          {
            "name": "variantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a run's current page.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveRunsResponseDTO"
                }
              }
            }
          }
        },
        "tags": [
          "run"
        ]
      }
    },
    "/api/v2/run/{runId}/stopComplete": {
      "post": {
        "operationId": "RunsController_runStopped",
        "parameters": [
          {
            "name": "runId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Command was successful"
          }
        },
        "tags": [
          "run"
        ]
      }
    },
    "/api/v2/run/{runId}/{command}": {
      "post": {
        "operationId": "RunsController_pauseRun",
        "parameters": [
          {
            "name": "runId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "command",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string",
              "enum": [
                "pause",
                "resume",
                "stop"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Command was successful"
          }
        },
        "tags": [
          "run"
        ]
      }
    },
    "/api/v2/run/parameters": {
      "get": {
        "operationId": "RunParametersController_getAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List run paramters."
          }
        },
        "tags": [
          "run"
        ]
      },
      "post": {
        "operationId": "RunParametersController_create",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Create run paramters."
          }
        },
        "tags": [
          "run"
        ]
      }
    },
    "/api/v2/run/parameters/{id}": {
      "get": {
        "operationId": "RunParametersController_get",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List run paramters."
          }
        },
        "tags": [
          "run"
        ]
      },
      "put": {
        "operationId": "RunParametersController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "run"
        ]
      }
    },
    "/api/v2/run/parameters/{id}/delete": {
      "post": {
        "operationId": "RunParametersController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "run"
        ]
      }
    },
    "/api/v2/run/{runId}/log": {
      "get": {
        "operationId": "RunsLogController_getRunLog",
        "parameters": [
          {
            "name": "runId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Log for runId.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunLogDTO"
                }
              }
            }
          },
          "404": {
            "description": "Log for runId was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunLogDTO"
                }
              }
            }
          }
        },
        "tags": [
          "run"
        ]
      },
      "put": {
        "operationId": "RunsLogController_updateRunLog",
        "parameters": [
          {
            "name": "runId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RunLogDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Write the log for a run.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunLogDTO"
                }
              }
            }
          }
        },
        "tags": [
          "run"
        ]
      }
    },
    "/api/v2/run/log": {
      "get": {
        "operationId": "RunsLogController_getLogs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunStatusDTO"
                }
              }
            }
          }
        },
        "tags": [
          "run"
        ]
      }
    },
    "/api/v2/run/{runId}/log/append": {
      "post": {
        "operationId": "RunsLogController_appendRunLog",
        "parameters": [
          {
            "name": "runId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppendRunLogRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Append the log for a run.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunLogDTO"
                }
              }
            }
          }
        },
        "tags": [
          "run"
        ]
      }
    },
    "/api/v2/run/{id}/status": {
      "get": {
        "operationId": "RunsStatusController_getStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a run's status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunStatusDTO"
                }
              }
            }
          }
        },
        "tags": [
          "run"
        ]
      },
      "put": {
        "operationId": "RunsStatusController_updateStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RunStatusDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update a run's status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunStatusDTO"
                }
              }
            }
          }
        },
        "tags": [
          "run"
        ]
      }
    },
    "/api/v2/run/{runId}/workQueue": {
      "get": {
        "operationId": "RunsWorkQueueController_get",
        "parameters": [
          {
            "name": "runId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Work queue for runId.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkQueueDTO"
                }
              }
            }
          },
          "404": {
            "description": "Work queue for runId was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkQueueDTO"
                }
              }
            }
          }
        },
        "tags": [
          "run"
        ]
      },
      "put": {
        "operationId": "RunsWorkQueueController_update",
        "parameters": [
          {
            "name": "runId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkQueueDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated work queue.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkQueueDTO"
                }
              }
            }
          }
        },
        "tags": [
          "run"
        ]
      }
    },
    "/api/v2/run/options": {
      "get": {
        "operationId": "StartOptionsController_getStartOptions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The start options available to the user."
          }
        },
        "tags": [
          "run"
        ]
      }
    },
    "/api/v2/runs/{id}/run/{runNumber}": {
      "get": {
        "operationId": "RunsLogControllerV2_getRun",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runNumber",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunDocument"
                }
              }
            }
          }
        },
        "tags": [
          "runs"
        ]
      }
    },
    "/api/v2/runs/{id}/log/{runNumber}": {
      "get": {
        "operationId": "RunsLogControllerV2_getRunLog",
        "summary": "Get the logs for the given run",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runNumber",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "default": 50,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "String sort",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the logs for the given run",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogWithCount"
                }
              }
            }
          }
        },
        "tags": [
          "runs"
        ]
      }
    },
    "/api/v2/start/variant/{id}": {
      "post": {
        "operationId": "StartRunController_startRun",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartRunRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Run was started successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartRunSuccessResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Some error occured so the run was not started."
          },
          "403": {
            "description": "The user does not have permission to use the driver requested."
          },
          "500": {
            "description": "An unknown error occured which prevented the run from starting."
          }
        },
        "tags": [
          "start"
        ]
      }
    },
    "/api/v2/variants": {
      "get": {
        "operationId": "VariantController_getVariants",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get all the variants.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformedVariantDtos"
                }
              }
            }
          }
        },
        "tags": [
          "variants"
        ]
      },
      "post": {
        "operationId": "VariantController_createVariant",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVariantDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create a new variant.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VariantDto"
                }
              }
            }
          }
        },
        "tags": [
          "variants"
        ]
      }
    },
    "/api/v2/variants/{id}": {
      "get": {
        "operationId": "VariantController_getVariant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the variant with id."
          }
        },
        "tags": [
          "variants"
        ]
      },
      "put": {
        "operationId": "VariantController_updateVariant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVariantDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update an existing variant.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VariantDto"
                }
              }
            }
          }
        },
        "tags": [
          "variants"
        ]
      }
    },
    "/api/v2/variants/parent/{id}": {
      "get": {
        "operationId": "VariantController_getVariantsWithParent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get variants with given parent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VariantDto"
                }
              }
            }
          }
        },
        "tags": [
          "variants"
        ]
      }
    },
    "/api/v2/variants/{id}/workspace": {
      "get": {
        "operationId": "VariantController_getVariantsWorkspace",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the variant's workspace",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceDto"
                }
              }
            }
          }
        },
        "tags": [
          "variants"
        ]
      }
    },
    "/api/v2/variants/{id}/application": {
      "get": {
        "operationId": "VariantController_getVariantsApplication",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the variant's application"
          }
        },
        "tags": [
          "variants"
        ]
      }
    },
    "/api/v2/variants/{appId}/model": {
      "get": {
        "operationId": "ModelController_get",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "default": 50,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the model for the application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationModelDTO"
                }
              }
            }
          }
        },
        "tags": [
          "variants"
        ]
      },
      "delete": {
        "operationId": "ModelController_delete",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete the model for the application"
          }
        },
        "tags": [
          "variants"
        ]
      }
    },
    "/api/v2/variants/{appId}/model/components/{compId}": {
      "get": {
        "operationId": "ModelController_getComponent",
        "summary": "Get a specific component from the application model",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "description": "The variant id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "compId",
            "required": true,
            "in": "path",
            "description": "The component id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The application component",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationComponentDTO"
                }
              }
            }
          },
          "404": {
            "description": "No component was found with the provided id"
          }
        },
        "tags": [
          "variants"
        ]
      }
    },
    "/api/v2/variants/{id}/model/components/{compId}": {
      "delete": {
        "operationId": "ModelController_deleteComponent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The application id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "compId",
            "required": true,
            "in": "path",
            "description": "The component id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Component, descendants, and relationships deleted from the model."
          },
          "403": {
            "description": "Component was BROWSER_NODE or COMMON_COMPONENTS_NODE and cannot be updated."
          }
        },
        "tags": [
          "variants"
        ]
      }
    },
    "/api/v2/variants/{appId}/model/update": {
      "post": {
        "operationId": "ModelController_applyUpdates",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationModelUpdateRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Apply updates to the model"
          }
        },
        "tags": [
          "variants"
        ]
      }
    },
    "/api/v2/variants/{appId}/model/pages": {
      "post": {
        "operationId": "ModelController_savePageModel",
        "summary": "Save a page model",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "description": "The variant id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePageModelDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The ID of the newly saved page model",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "variants"
        ]
      },
      "get": {
        "operationId": "ModelController_listPageModels",
        "summary": "List page models for a variant",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "description": "The variant id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runId",
            "required": false,
            "in": "query",
            "description": "Filter by run id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List page models. Note that the _id field lies; it is actually an object from groupBy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageModelDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "variants"
        ]
      }
    },
    "/api/v2/variants/{appId}/model/pages/{modelIdKind}/{id}/model": {
      "get": {
        "operationId": "ModelController_getPageModel",
        "summary": "Get the model for a page",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "description": "The variant id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modelIdKind",
            "required": true,
            "in": "path",
            "description": "What kind of ID to fetch the model by.\n\t\t- When 'page-component', `id` should be an application component id. The most recent page model for this page will be retrieved. \n\t\t- When 'page-model', `id` should be a page model id. The page model with this id will be retrieved.",
            "schema": {
              "type": "string",
              "enum": [
                "page-component",
                "page-model"
              ]
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Either a page model id or a page component id, depending on what `modelIdKind` is set to.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The page model",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "404": {
            "description": "No page model was found with the provided search criteria"
          },
          "422": {
            "description": "Occurrs when the requested model id kind is \"page-component\" and a model component exists for the requested id, but the component is not a page."
          }
        },
        "tags": [
          "variants"
        ]
      }
    },
    "/api/v2/variants/{id}/model/remove-model": {
      "delete": {
        "operationId": "ModelController_removeModel",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Remove variants model"
          }
        },
        "tags": [
          "variants"
        ]
      }
    },
    "/api/v2/permissions": {
      "get": {
        "operationId": "PermissionController_getPermissions",
        "summary": "Get permissions",
        "deprecated": true,
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get all the permissions available to the authenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          }
        },
        "tags": [
          "permissions"
        ]
      },
      "post": {
        "operationId": "PermissionController_createPermission",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePermissionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create a new permission.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/PermissionResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvitedUserPermissionDto"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "permissions"
        ]
      }
    },
    "/api/v2/permissions/{id}": {
      "get": {
        "operationId": "PermissionController_getPermission",
        "summary": "Get permission with id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get permission with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          }
        },
        "tags": [
          "permissions"
        ]
      },
      "put": {
        "operationId": "PermissionController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePermissionRoleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update role permission.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          }
        },
        "tags": [
          "permissions"
        ]
      },
      "delete": {
        "operationId": "PermissionController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete permission",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          }
        },
        "tags": [
          "permissions"
        ]
      }
    },
    "/api/v2/permissions/resource/{id}": {
      "get": {
        "operationId": "PermissionController_getResourcePermissions",
        "summary": "Get permission of the resource with id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get permission of the resource with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          }
        },
        "tags": [
          "permissions"
        ]
      }
    },
    "/api/v2/permissions/user/{id}": {
      "get": {
        "operationId": "PermissionController_getUserPermissions",
        "summary": "Get all the permissions of the user with id",
        "deprecated": true,
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all the permissions of the user with id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          }
        },
        "tags": [
          "permissions"
        ]
      }
    },
    "/api/v2/usage/{id}": {
      "get": {
        "operationId": "UsageController_getWorkspaceUsage",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "required": false,
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "runId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "default": 50,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          },
          {
            "name": "populate",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "runId",
                  "workspaceId"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get workspace's usage data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsageDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "usage"
        ]
      },
      "post": {
        "operationId": "UsageController_createWorkspace",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUsageDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create a new usage entry.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageDto"
                }
              }
            }
          }
        },
        "tags": [
          "usage"
        ]
      }
    },
    "/api/v2/analytics/app/{appId}/run/{runId}": {
      "get": {
        "operationId": "AnalyticsController_getRunRuleStatistics",
        "summary": "Get rule statistics for a run",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Only include results from a specific run, or a set of runs",
            "required": false,
            "name": "runId",
            "in": "query",
            "schema": {}
          },
          {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Filter for one or more rules by id",
            "required": false,
            "name": "ruleId",
            "in": "query",
            "schema": {}
          },
          {
            "required": false,
            "name": "ruleType",
            "in": "query",
            "schema": {
              "enum": [
                "accessibility-rule",
                "functional-rule",
                "resource-rule",
                "webform-rule",
                "link-rule"
              ],
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "pageId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "componentId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "componentType",
            "in": "query",
            "schema": {
              "enum": [
                "Iframe",
                "Body",
                "Header",
                "Footer",
                "Navbar",
                "Form",
                "Button",
                "Anchor",
                "Input",
                "Content",
                "Section",
                "Select",
                "Option",
                "Table",
                "Table Header",
                "Table Body",
                "Table Footer",
                "Table Row",
                "Table Header Cell",
                "Table Data Cell",
                "Large Heading",
                "Medium Heading",
                "Small Heading",
                "Webform",
                "Label",
                "Field",
                "Checkbox Cluster",
                "Radio Group",
                "Radio",
                "Checkbox",
                "Select Option",
                "Text Area",
                "Text Node",
                "Image",
                "Icon",
                "Grid",
                "Grid Item",
                "List",
                "List Item",
                "Unclassified"
              ],
              "type": "string"
            }
          },
          {
            "name": "groupBy",
            "required": true,
            "in": "query",
            "description": "The fields to group by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "populate",
            "required": false,
            "in": "query",
            "description": "Populate certain fields by joining with other collections.\n\nValues in this list must be a subset of `groupBy`, and can only\napply to id fields. Instead of containing\nan ObjectId, populated fields will contain the document the id\nrefers to.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rule statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsResultsDTO"
                }
              }
            }
          },
          "404": {
            "description": "No run with the specified ID exists"
          },
          "412": {
            "description": "The run is still in progress"
          }
        },
        "tags": [
          "analytics"
        ]
      }
    },
    "/api/v2/analytics/app/{appId}/components": {
      "get": {
        "operationId": "AnalyticsController_getComponentRuleStatistics",
        "summary": "Get rule statistics for all components in an application",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Only include results from a specific run, or a set of runs",
            "required": false,
            "name": "runId",
            "in": "query",
            "schema": {}
          },
          {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Filter for one or more rules by id",
            "required": false,
            "name": "ruleId",
            "in": "query",
            "schema": {}
          },
          {
            "required": false,
            "name": "ruleType",
            "in": "query",
            "schema": {
              "enum": [
                "accessibility-rule",
                "functional-rule",
                "resource-rule",
                "webform-rule",
                "link-rule"
              ],
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "pageId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "componentId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "componentType",
            "in": "query",
            "schema": {
              "enum": [
                "Iframe",
                "Body",
                "Header",
                "Footer",
                "Navbar",
                "Form",
                "Button",
                "Anchor",
                "Input",
                "Content",
                "Section",
                "Select",
                "Option",
                "Table",
                "Table Header",
                "Table Body",
                "Table Footer",
                "Table Row",
                "Table Header Cell",
                "Table Data Cell",
                "Large Heading",
                "Medium Heading",
                "Small Heading",
                "Webform",
                "Label",
                "Field",
                "Checkbox Cluster",
                "Radio Group",
                "Radio",
                "Checkbox",
                "Select Option",
                "Text Area",
                "Text Node",
                "Image",
                "Icon",
                "Grid",
                "Grid Item",
                "List",
                "List Item",
                "Unclassified"
              ],
              "type": "string"
            }
          },
          {
            "name": "groupBy",
            "required": true,
            "in": "query",
            "description": "The fields to group by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "populate",
            "required": false,
            "in": "query",
            "description": "Populate certain fields by joining with other collections.\n\nValues in this list must be a subset of `groupBy`, and can only\napply to id fields. Instead of containing\nan ObjectId, populated fields will contain the document the id\nrefers to.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aggregated analytics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsResultsDTO"
                }
              }
            }
          }
        },
        "tags": [
          "analytics"
        ]
      }
    },
    "/api/v2/analytics/app/{appId}/pages": {
      "get": {
        "operationId": "AnalyticsController_getPageRuleStatistics",
        "summary": "Get rule statistics for all components in an application",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Only include results from a specific run, or a set of runs",
            "required": false,
            "name": "runId",
            "in": "query",
            "schema": {}
          },
          {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Filter for one or more rules by id",
            "required": false,
            "name": "ruleId",
            "in": "query",
            "schema": {}
          },
          {
            "required": false,
            "name": "ruleType",
            "in": "query",
            "schema": {
              "enum": [
                "accessibility-rule",
                "functional-rule",
                "resource-rule",
                "webform-rule",
                "link-rule"
              ],
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "pageId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "componentId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "componentType",
            "in": "query",
            "schema": {
              "enum": [
                "Iframe",
                "Body",
                "Header",
                "Footer",
                "Navbar",
                "Form",
                "Button",
                "Anchor",
                "Input",
                "Content",
                "Section",
                "Select",
                "Option",
                "Table",
                "Table Header",
                "Table Body",
                "Table Footer",
                "Table Row",
                "Table Header Cell",
                "Table Data Cell",
                "Large Heading",
                "Medium Heading",
                "Small Heading",
                "Webform",
                "Label",
                "Field",
                "Checkbox Cluster",
                "Radio Group",
                "Radio",
                "Checkbox",
                "Select Option",
                "Text Area",
                "Text Node",
                "Image",
                "Icon",
                "Grid",
                "Grid Item",
                "List",
                "List Item",
                "Unclassified"
              ],
              "type": "string"
            }
          },
          {
            "name": "groupBy",
            "required": true,
            "in": "query",
            "description": "The fields to group by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "populate",
            "required": false,
            "in": "query",
            "description": "Populate certain fields by joining with other collections.\n\nValues in this list must be a subset of `groupBy`, and can only\napply to id fields. Instead of containing\nan ObjectId, populated fields will contain the document the id\nrefers to.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aggregated analytics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsResultsDTO"
                }
              }
            }
          }
        },
        "tags": [
          "analytics"
        ]
      }
    },
    "/api/v2/analytics/app/{appId}/pages/performance": {
      "get": {
        "operationId": "AnalyticsController_getPagePerformanceStatistics",
        "summary": "",
        "description": "Get page performance statistics",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "description": "The ID of the application",
            "example": "64dbf088a5d6e403b5ddbe65",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runId",
            "required": false,
            "in": "query",
            "description": "Only include statistics from a specific run",
            "example": "6503740ca17807e0a04c3309",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageId",
            "required": false,
            "in": "query",
            "description": "Only include statistics from a specific page",
            "example": "8f09118a-b57a-4c5f-b592-45cc9f114e2b",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceRebuild",
            "required": false,
            "in": "query",
            "description": "Forcibly re-build analytics data for the specified run. Avoid this when possible because its expensive.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceResultsDTO"
                }
              }
            }
          }
        },
        "tags": [
          "analytics"
        ]
      }
    },
    "/api/v2/tags": {
      "get": {
        "operationId": "TagsController_getTagsWithIds",
        "summary": "Get tags with ids",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get tags with ids",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformedTagDTOS"
                }
              }
            }
          }
        },
        "tags": [
          "tags"
        ]
      }
    },
    "/api/v2/tags/{id}": {
      "get": {
        "operationId": "TagsController_getAppTags",
        "summary": "Get applications tag with application id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get applications tag with application id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformedTagWithPopulatedParentDTOS"
                }
              }
            }
          }
        },
        "tags": [
          "tags"
        ]
      },
      "post": {
        "operationId": "TagsController_create",
        "summary": "Create tag",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create Tag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformedTagDTO"
                }
              }
            }
          }
        },
        "tags": [
          "tags"
        ]
      }
    },
    "/api/v2/tags/{id}/update": {
      "put": {
        "operationId": "TagsController_updateTag",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Tag.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformedTagDTO"
                }
              }
            }
          }
        },
        "tags": [
          "tags"
        ]
      }
    },
    "/api/v2/tags/{appId}/{tagId}/updateParent": {
      "put": {
        "operationId": "TagsController_updateParent",
        "summary": "Update Tags parent",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagParentDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "tags parent updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformedTagWithPopulatedParentDTO"
                }
              }
            }
          },
          "400": {
            "description": "ApplicationId and parentId do not match for the given tag"
          },
          "401": {
            "description": "The user does not have the required permissions on the new parent"
          }
        },
        "tags": [
          "tags"
        ]
      }
    },
    "/api/v2/tags/{id}/{tagId}": {
      "delete": {
        "operationId": "TagsController_removeTag",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete applications tag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformedTagDTO"
                }
              }
            }
          }
        },
        "tags": [
          "tags"
        ]
      }
    },
    "/api/v2/applications": {
      "get": {
        "operationId": "ApplicationController_getApplications",
        "summary": "Get applications",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get all the applications.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformedApplicationDtos"
                }
              }
            }
          }
        },
        "tags": [
          "applications"
        ]
      },
      "post": {
        "operationId": "ApplicationController_createApplication",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApplicationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create a new application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformedApplicationDto"
                }
              }
            }
          }
        },
        "tags": [
          "applications"
        ]
      }
    },
    "/api/v2/applications/{id}": {
      "get": {
        "operationId": "ApplicationController_getApplication",
        "summary": "Get application with id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get application with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformedApplicationDto"
                }
              }
            }
          }
        },
        "tags": [
          "applications"
        ]
      },
      "put": {
        "operationId": "ApplicationController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApplicationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Application."
          }
        },
        "tags": [
          "applications"
        ]
      },
      "delete": {
        "operationId": "ApplicationController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete application"
          }
        },
        "tags": [
          "applications"
        ]
      }
    },
    "/api/v2/applications/{id}/tags": {
      "get": {
        "operationId": "ApplicationController_getApplicationsTags",
        "summary": "Get the application's tags",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the application's tags",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformedApplicationDto"
                }
              }
            }
          }
        },
        "tags": [
          "applications"
        ]
      }
    },
    "/api/v2/applications/parent/{id}": {
      "get": {
        "operationId": "ApplicationController_getApplicationWithParent",
        "summary": "Get applications with given parent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get applications with a given parent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformedApplicationDtos"
                }
              }
            }
          }
        },
        "tags": [
          "applications"
        ]
      }
    },
    "/api/v2/health": {
      "get": {
        "operationId": "HealthController_getHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get the health of the application."
          }
        },
        "tags": [
          "health"
        ]
      }
    },
    "/api/v2/health/info": {
      "get": {
        "operationId": "HealthController_getInfo",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Information about the the repository service",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/html": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "health"
        ]
      }
    },
    "/api/v2/issues": {
      "post": {
        "operationId": "IssueController_create",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "issues"
        ]
      },
      "get": {
        "operationId": "IssueController_getAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "issues"
        ]
      },
      "put": {
        "operationId": "IssueController_updateOne",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "issues"
        ]
      }
    },
    "/api/v2/issues/{id}": {
      "get": {
        "operationId": "IssueController_get",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "issues"
        ]
      },
      "delete": {
        "operationId": "IssueController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "issues"
        ]
      },
      "put": {
        "operationId": "IssueController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "issues"
        ]
      }
    },
    "/api/v2/issues/{id}/logs/{appId}": {
      "get": {
        "operationId": "IssueController_getLogs",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "issues"
        ]
      }
    },
    "/api/v2/screenshots": {
      "post": {
        "operationId": "ScreenshotController_createScreenshotEntity",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Creates a new screenshot entity"
          }
        },
        "tags": [
          "Screenshots"
        ]
      }
    },
    "/api/v2/screenshots/public/{id}": {
      "post": {
        "operationId": "ScreenshotController_addPublicScreenshot",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Creates a public screenshot"
          }
        },
        "tags": [
          "Screenshots"
        ]
      }
    },
    "/api/v2/screenshots/{screenshotId}": {
      "post": {
        "operationId": "ScreenshotController_uploadScreenshot",
        "parameters": [
          {
            "name": "screenshotId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Uploads a screenshot jpeg"
          }
        },
        "tags": [
          "Screenshots"
        ]
      },
      "get": {
        "operationId": "ScreenshotController_getScreenshot",
        "parameters": [
          {
            "name": "screenshotId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a screenshot by its id"
          }
        },
        "tags": [
          "Screenshots"
        ]
      }
    },
    "/api/v2/users/pat": {
      "post": {
        "operationId": "UserController_createPAT",
        "summary": "Create a new PAT.",
        "description": "Creates a new Personal Access Token (PAT) for the user making this request.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePatDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePatResponseDTO"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "get": {
        "operationId": "UserController_findPATs",
        "summary": "Get all PATs for the current user.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns all PATs for the current user. Even if the user has no PATs, a successful response with an empty array is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PatDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v2/users/pat/{id}": {
      "delete": {
        "operationId": "UserController_revokePAT",
        "summary": "Delete a PAT.",
        "description": "Delete one of the current user's PATs by its ID. This is a no-op if the PAT does not exist or if it belongs to another user.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns ok if the PAT was deleted successfully."
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v2/users": {
      "get": {
        "operationId": "UserController_getUsers",
        "summary": "Get users",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "default": 50,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          },
          {
            "name": "text",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaces",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all the users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserDto"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v2/users/{id}": {
      "get": {
        "operationId": "UserController_getUser",
        "summary": "Get user with id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get user with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "put": {
        "operationId": "UserController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "delete": {
        "operationId": "UserController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete user"
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v2/users/validateUser": {
      "post": {
        "operationId": "UserController_validateUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns user if its already created, creates user if doesnt exist."
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v2/users/activateUser/{id}": {
      "post": {
        "operationId": "UserController_activateUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns ok if user was marked as active successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v2/users/deactivateUser/{id}": {
      "post": {
        "operationId": "UserController_deactivateUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns ok if user was marked as inactive successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v2/workspace": {
      "get": {
        "operationId": "WorkspaceController_getWorkspaces",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "default": 50,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all the workspaces.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformedWorkspaceDtos"
                }
              }
            }
          }
        },
        "tags": [
          "workspace"
        ]
      },
      "post": {
        "operationId": "WorkspaceController_createWorkspace",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkspaceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create a new workspace.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformedWorkspaceDto"
                }
              }
            }
          }
        },
        "tags": [
          "workspace"
        ]
      }
    },
    "/api/v2/workspace/{id}": {
      "get": {
        "operationId": "WorkspaceController_getWorkspace",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get workspace with id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformedWorkspaceDto"
                }
              }
            }
          }
        },
        "tags": [
          "workspace"
        ]
      },
      "put": {
        "operationId": "WorkspaceController_updateWorkspace",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkspaceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update an existing workspace."
          }
        },
        "tags": [
          "workspace"
        ]
      },
      "delete": {
        "operationId": "WorkspaceController_deleteWorkspace",
        "summary": "",
        "description": "Delete a workspace. Deprecated, use DELETE /entities/:entityId",
        "deprecated": true,
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete workspace."
          }
        },
        "tags": [
          "workspace"
        ]
      }
    },
    "/api/v2/workspace/{wsId}/add-unlimited-plan": {
      "post": {
        "operationId": "WorkspaceController_addUnlimitedPlan",
        "parameters": [
          {
            "name": "wsId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Add unlimited plan to workspace.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformedDefaultResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "workspace"
        ]
      }
    },
    "/api/v2/invite-user": {
      "get": {
        "operationId": "InviteUserController_getInvites",
        "summary": "Get invitations",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "default": 50,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          },
          {
            "name": "text",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all the invitations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InviteUserDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "invite-user"
        ]
      },
      "post": {
        "operationId": "InviteUserController_createInvitation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserInvitationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create an invitation entry.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InviteUserDTO"
                }
              }
            }
          }
        },
        "tags": [
          "invite-user"
        ]
      }
    },
    "/api/v2/invite-user/{invitationId}": {
      "delete": {
        "operationId": "InviteUserController_removeEntity",
        "summary": "Remove invitation",
        "parameters": [
          {
            "name": "invitationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Remove invitation"
          }
        },
        "tags": [
          "invite-user"
        ]
      }
    },
    "/api/v2/entities/system": {
      "get": {
        "operationId": "InstanceEntityController_getSystemsEntity",
        "summary": "Get systems's entity",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get entity's children",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityResponse"
                }
              }
            }
          }
        },
        "tags": [
          "entities"
        ]
      }
    },
    "/api/v2/entities/{id}/children": {
      "get": {
        "operationId": "InstanceEntityController_getEntitysChildren",
        "summary": "Get entity's children",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get entity's children"
          }
        },
        "tags": [
          "entities"
        ]
      }
    },
    "/api/v2/entities/{id}": {
      "delete": {
        "operationId": "InstanceEntityController_removeEntity",
        "summary": "Remove entity and it's children",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Remove entity and it's children"
          }
        },
        "tags": [
          "entities"
        ]
      }
    },
    "/api/v2/subscription/manage-subscriptions": {
      "post": {
        "operationId": "SubscriptionController_manageSubscriptions",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "subscription"
        ]
      }
    },
    "/api/v2/view/{parentId}": {
      "get": {
        "operationId": "ViewController_getViews",
        "parameters": [
          {
            "name": "parentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "required": false,
            "in": "query",
            "description": "The url the view should be displayed",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Get views.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ViewDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "view"
        ]
      },
      "post": {
        "operationId": "ViewController_createView",
        "parameters": [
          {
            "name": "parentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateViewDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create a view.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewDTO"
                }
              }
            }
          }
        },
        "tags": [
          "view"
        ]
      }
    },
    "/api/v2/view/{parentId}/{viewId}": {
      "put": {
        "operationId": "ViewController_updateView",
        "parameters": [
          {
            "name": "parentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateViewDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update an existing view.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewDTO"
                }
              }
            }
          }
        },
        "tags": [
          "view"
        ]
      },
      "delete": {
        "operationId": "ViewController_deleteView",
        "parameters": [
          {
            "name": "parentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete view."
          }
        },
        "tags": [
          "view"
        ]
      }
    }
  },
  "info": {
    "title": "ASTA Repository API",
    "description": "API used for the agent and companion",
    "version": "0.15.1",
    "contact": {}
  },
  "tags": [],
  "servers": [
    {
      "url": "http://localhost:4000",
      "description": "Local development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "BaseAssetImportDataDto": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          }
        },
        "required": [
          "text"
        ]
      },
      "ImportRuleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/BaseAssetImportDataDto"
          },
          "type": {
            "type": "string",
            "enum": [
              "rule"
            ]
          }
        },
        "required": [
          "name",
          "description",
          "data",
          "type"
        ]
      },
      "ImportFlowDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/BaseAssetImportDataDto"
          },
          "type": {
            "type": "string",
            "enum": [
              "flow"
            ]
          }
        },
        "required": [
          "name",
          "description",
          "data",
          "type"
        ]
      },
      "ImportDatasetDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/BaseAssetImportDataDto"
          },
          "type": {
            "type": "string",
            "enum": [
              "dataset"
            ]
          }
        },
        "required": [
          "name",
          "description",
          "data",
          "type"
        ]
      },
      "AssetsFilterDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "invalid"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "accessibility-rule",
              "functional-rule",
              "resource-rule",
              "webform-rule",
              "link-rule"
            ]
          },
          "tag": {
            "type": "object"
          },
          "search": {
            "type": "object"
          }
        }
      },
      "AssetAnalyticsDTO": {
        "type": "object",
        "properties": {
          "failed": {
            "type": "number"
          },
          "lastTestedTimestamp": {
            "type": "string"
          },
          "lastTestedRunNumber": {
            "type": "number"
          },
          "lastTestedRunId": {
            "type": "string"
          }
        },
        "required": [
          "failed",
          "lastTestedTimestamp",
          "lastTestedRunNumber",
          "lastTestedRunId"
        ]
      },
      "AssetTableEntryDTO": {
        "type": "object",
        "properties": {
          "asset": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DatasetWithPopulatedParentAndTags"
              },
              {
                "$ref": "#/components/schemas/RuleWithPopulatedParentAndTags"
              },
              {
                "$ref": "#/components/schemas/FlowWithPopulatedParentAndTags"
              },
              {
                "$ref": "#/components/schemas/RunTemplateWithPopulatedParentAndTags"
              },
              {
                "$ref": "#/components/schemas/FormSpecWithPopulatedParentAndTags"
              }
            ],
            "description": "Only present if isGroup is false"
          },
          "subRows": {
            "description": "Only present if isGroup is true, contains the grouped assets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetTableEntryDTO"
            }
          },
          "isGroup": {
            "type": "boolean",
            "description": "True if a groupBy condition is applied, otherwise false"
          },
          "analytics": {
            "$ref": "#/components/schemas/AssetAnalyticsDTO"
          },
          "groupName": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Only present if isGroup is true, references the groupName"
          }
        },
        "required": [
          "isGroup"
        ]
      },
      "RuleScenario": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "id"
        ]
      },
      "RuleData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "accessibility-rule",
              "functional-rule",
              "resource-rule",
              "webform-rule",
              "link-rule"
            ]
          },
          "text": {
            "type": "string"
          },
          "scenarios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleScenario"
            }
          },
          "isExecutable": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "type",
          "text",
          "scenarios"
        ]
      },
      "Rule": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/TagDTO"
                }
              ]
            }
          },
          "parent": {
            "description": "The id referencing the parent the asset belongs to",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ResourceDto"
              }
            ]
          },
          "status": {
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "inactive",
              "invalid"
            ]
          },
          "version": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": [
              "rule"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/RuleData"
          }
        },
        "required": [
          "_id",
          "name",
          "description",
          "tags",
          "parent",
          "status",
          "type",
          "data"
        ]
      },
      "ResourceDto": {
        "type": "object",
        "properties": {
          "updatedBy": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parent": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "instance",
              "application",
              "workspace",
              "variant"
            ]
          },
          "role": {
            "type": "number",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5
            ]
          }
        },
        "required": [
          "updatedBy",
          "_id",
          "name",
          "parent",
          "type",
          "role"
        ]
      },
      "RuleWithPopulatedParentAndTags": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "inactive",
              "invalid"
            ]
          },
          "version": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": [
              "rule"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/RuleData"
          },
          "parent": {
            "description": "The id referencing the parent the asset belongs to",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceDto"
              }
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TagDTO"
                }
              ]
            }
          },
          "_id": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "status",
          "type",
          "data",
          "parent",
          "tags",
          "_id"
        ]
      },
      "CreateAssetDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "dataset",
              "rule",
              "flow",
              "run-template",
              "form-spec"
            ]
          },
          "status": {
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "inactive",
              "invalid"
            ]
          },
          "version": {
            "type": "number"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "parent": {
            "type": "string",
            "description": "The id referencing the application the asset belongs to"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DatasetData"
              },
              {
                "$ref": "#/components/schemas/FormSpecData"
              },
              {
                "$ref": "#/components/schemas/RuleData"
              },
              {
                "$ref": "#/components/schemas/RunTemplateData"
              },
              {
                "$ref": "#/components/schemas/FlowData"
              }
            ]
          }
        },
        "required": [
          "name",
          "description",
          "type",
          "status",
          "tags",
          "parent",
          "data"
        ]
      },
      "ImportAssetDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "dataset",
              "rule",
              "flow"
            ]
          },
          "assets": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ImportRuleDto"
                },
                {
                  "$ref": "#/components/schemas/ImportFlowDto"
                },
                {
                  "$ref": "#/components/schemas/ImportDatasetDto"
                }
              ]
            }
          },
          "parent": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "assets",
          "parent"
        ]
      },
      "ImportResponseDto": {
        "type": "object",
        "properties": {
          "importedCount": {
            "type": "number"
          }
        },
        "required": [
          "importedCount"
        ]
      },
      "UpdateAssetDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "dataset",
              "rule",
              "flow",
              "run-template",
              "form-spec"
            ]
          },
          "status": {
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "inactive",
              "invalid"
            ]
          },
          "version": {
            "type": "number"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "parent": {
            "type": "string",
            "description": "The id referencing the application the asset belongs to"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DatasetData"
              },
              {
                "$ref": "#/components/schemas/FormSpecData"
              },
              {
                "$ref": "#/components/schemas/RuleData"
              },
              {
                "$ref": "#/components/schemas/RunTemplateData"
              },
              {
                "$ref": "#/components/schemas/FlowData"
              }
            ]
          }
        },
        "required": [
          "name",
          "description",
          "type",
          "status",
          "tags",
          "parent",
          "data"
        ]
      },
      "UpdateAssetParentDTO": {
        "type": "object",
        "properties": {
          "newParent": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "newParent",
          "name"
        ]
      },
      "DatasetData": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Parsed dataset, only present if the dataset is valid",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "text": {
            "type": "string"
          }
        },
        "required": [
          "text"
        ]
      },
      "Dataset": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/TagDTO"
                }
              ]
            }
          },
          "parent": {
            "description": "The id referencing the parent the asset belongs to",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ResourceDto"
              }
            ]
          },
          "status": {
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "inactive",
              "invalid"
            ]
          },
          "version": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": [
              "dataset"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/DatasetData"
          }
        },
        "required": [
          "_id",
          "name",
          "description",
          "tags",
          "parent",
          "status",
          "type",
          "data"
        ]
      },
      "DatasetWithPopulatedParentAndTags": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "inactive",
              "invalid"
            ]
          },
          "version": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": [
              "dataset"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/DatasetData"
          },
          "parent": {
            "description": "The id referencing the parent the asset belongs to",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceDto"
              }
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TagDTO"
                }
              ]
            }
          },
          "_id": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "status",
          "type",
          "data",
          "parent",
          "tags",
          "_id"
        ]
      },
      "FlowParam": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "defaultValue": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "FlowData": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "parseableText": {
            "type": "string"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlowParam"
            }
          }
        },
        "required": [
          "text",
          "parameters"
        ]
      },
      "Flow": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/TagDTO"
                }
              ]
            }
          },
          "parent": {
            "description": "The id referencing the parent the asset belongs to",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ResourceDto"
              }
            ]
          },
          "status": {
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "inactive",
              "invalid"
            ]
          },
          "version": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": [
              "flow"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/FlowData"
          }
        },
        "required": [
          "_id",
          "name",
          "description",
          "tags",
          "parent",
          "status",
          "type",
          "data"
        ]
      },
      "FlowWithPopulatedParentAndTags": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "inactive",
              "invalid"
            ]
          },
          "version": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": [
              "flow"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/FlowData"
          },
          "parent": {
            "description": "The id referencing the parent the asset belongs to",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceDto"
              }
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TagDTO"
                }
              ]
            }
          },
          "_id": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "status",
          "type",
          "data",
          "parent",
          "tags",
          "_id"
        ]
      },
      "PopulatedWorkQueue": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "Activity",
            "enum": [
              "Activity",
              "ChatGPT",
              "Component",
              "Jump",
              "Link Testing",
              "Page",
              "Form Field"
            ]
          },
          "label": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the workqueue item"
          },
          "pageId": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "componentId": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "activityId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Flow"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "type",
          "label"
        ]
      },
      "WorkQueueItem": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "Activity",
            "enum": [
              "Activity",
              "ChatGPT",
              "Component",
              "Jump",
              "Link Testing",
              "Page",
              "Form Field"
            ]
          },
          "label": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the workqueue item"
          },
          "pageId": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "componentId": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "activityId": {
            "description": "",
            "example": "",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Flow"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "type",
          "label"
        ]
      },
      "RunTemplateAssets": {
        "type": "object",
        "properties": {
          "rules": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "activities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "datasets": {
            "type": "object",
            "description": "Mapping of dataset IDs (referable to in flows and rules) to resolved dataset IDs (data from these will actually be used)"
          }
        },
        "required": [
          "rules",
          "data",
          "activities"
        ]
      },
      "Extensions": {
        "type": "object",
        "properties": {
          "accessibility": {
            "type": "boolean"
          },
          "brokenLinks": {
            "type": "boolean"
          },
          "resources": {
            "type": "boolean"
          },
          "performance": {
            "type": "boolean"
          }
        },
        "required": [
          "accessibility",
          "brokenLinks",
          "resources",
          "performance"
        ]
      },
      "RunTemplateData": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "depth": {
            "type": "number",
            "default": 3
          },
          "duration": {
            "type": "number"
          },
          "stopAfterFlows": {
            "type": "boolean",
            "default": false
          },
          "enableModeling": {
            "type": "boolean",
            "default": true
          },
          "pageLoadTimeout": {
            "type": "number",
            "default": 3000
          },
          "actionRetryAttempts": {
            "type": "number",
            "default": 1
          },
          "testableDomains": {
            "description": "Domains that will be tested by the agent.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assets": {
            "$ref": "#/components/schemas/RunTemplateAssets"
          },
          "extensions": {
            "$ref": "#/components/schemas/Extensions"
          },
          "workQueue": {
            "description": "A set of work queue items for the test",
            "example": "",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PopulatedWorkQueue"
                },
                {
                  "$ref": "#/components/schemas/WorkQueueItem"
                }
              ]
            }
          }
        },
        "required": [
          "path",
          "depth",
          "testableDomains",
          "assets",
          "extensions",
          "workQueue"
        ]
      },
      "RunTemplate": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/TagDTO"
                }
              ]
            }
          },
          "parent": {
            "description": "The id referencing the parent the asset belongs to",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ResourceDto"
              }
            ]
          },
          "status": {
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "inactive",
              "invalid"
            ]
          },
          "version": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": [
              "run-template"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/RunTemplateData"
          }
        },
        "required": [
          "_id",
          "name",
          "description",
          "tags",
          "parent",
          "status",
          "type",
          "data"
        ]
      },
      "RunTemplateWithPopulatedParentAndTags": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "inactive",
              "invalid"
            ]
          },
          "version": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": [
              "run-template"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/RunTemplateData"
          },
          "parent": {
            "description": "The id referencing the parent the asset belongs to",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceDto"
              }
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TagDTO"
                }
              ]
            }
          },
          "_id": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "status",
          "type",
          "data",
          "parent",
          "tags",
          "_id"
        ]
      },
      "FieldSpec": {
        "type": "object",
        "properties": {
          "fieldNumber": {
            "type": "string"
          },
          "fieldLabel": {
            "type": "string"
          },
          "fieldId": {
            "type": "string"
          },
          "required": {
            "type": "string",
            "enum": [
              "Yes",
              "No",
              ""
            ]
          },
          "minimumOccurrences": {
            "type": "number"
          },
          "maximumOccurrences": {
            "type": "number"
          },
          "agencyFieldName": {
            "type": "string"
          },
          "fieldType": {
            "type": "string"
          },
          "globalLibraryFieldName": {
            "type": "string"
          },
          "fieldTypeSource": {
            "type": "string"
          },
          "businessRules": {
            "type": "string"
          },
          "dataType": {
            "type": "string"
          },
          "listOfValues": {
            "type": "string"
          },
          "minCharsOrMinValue": {
            "type": "string"
          },
          "maxCharsOrMaxValue": {
            "type": "string"
          },
          "fieldImplementation": {
            "type": "string"
          },
          "helpTip": {
            "type": "string"
          },
          "mandatoryMessage": {
            "type": "string"
          },
          "validationMessage": {
            "type": "string"
          }
        }
      },
      "FormSpecData": {
        "type": "object",
        "properties": {
          "formTitle": {
            "type": "string"
          },
          "formId": {
            "type": "string"
          },
          "formVersion": {
            "type": "string"
          },
          "ombControlNumber": {
            "type": "string"
          },
          "ombExpirationDate": {
            "type": "string"
          },
          "formFamilies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldSpec"
            }
          }
        },
        "required": [
          "formTitle",
          "formId",
          "formVersion",
          "ombControlNumber",
          "ombExpirationDate",
          "formFamilies",
          "fields"
        ]
      },
      "FormSpec": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/TagDTO"
                }
              ]
            }
          },
          "parent": {
            "description": "The id referencing the parent the asset belongs to",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ResourceDto"
              }
            ]
          },
          "status": {
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "inactive",
              "invalid"
            ]
          },
          "version": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": [
              "form-spec"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/FormSpecData"
          }
        },
        "required": [
          "_id",
          "name",
          "description",
          "tags",
          "parent",
          "status",
          "type",
          "data"
        ]
      },
      "FormSpecWithPopulatedParentAndTags": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "inactive",
              "invalid"
            ]
          },
          "version": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": [
              "form-spec"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/FormSpecData"
          },
          "parent": {
            "description": "The id referencing the parent the asset belongs to",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceDto"
              }
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TagDTO"
                }
              ]
            }
          },
          "_id": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "status",
          "type",
          "data",
          "parent",
          "tags",
          "_id"
        ]
      },
      "StatisticsDTO": {
        "type": "object",
        "properties": {
          "counts": {
            "type": "object",
            "description": "The number of components in each state (e.g. passed, failed, todo)"
          }
        },
        "required": [
          "counts"
        ]
      },
      "ComponentStatisticsDTO": {
        "type": "object",
        "properties": {
          "Page": {
            "$ref": "#/components/schemas/StatisticsDTO"
          },
          "Item": {
            "$ref": "#/components/schemas/StatisticsDTO"
          }
        }
      },
      "SummaryStatisticsDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id for the run these statistics belong to",
            "example": "1231-asdf-123d-asdf"
          },
          "runId": {
            "type": "string",
            "description": "The id for the run these statistics belong to",
            "example": "1231-asdf-123d-asdf"
          },
          "componentStatistics": {
            "description": "The statistics for each type of test",
            "allOf": [
              {
                "$ref": "#/components/schemas/ComponentStatisticsDTO"
              }
            ]
          }
        },
        "required": [
          "id",
          "runId",
          "componentStatistics"
        ]
      },
      "RunResultsDto": {
        "type": "object",
        "properties": {
          "passed": {
            "type": "number"
          },
          "failed": {
            "type": "number"
          },
          "untested": {
            "type": "number"
          },
          "partial": {
            "type": "number"
          }
        },
        "required": [
          "passed",
          "failed",
          "untested",
          "partial"
        ]
      },
      "RunMetadataDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The run's id",
            "example": "123"
          },
          "applicationId": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "parametersId": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "templateName": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "runNumber": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "startTime": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "endTime": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "status": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "summaryStatistics": {
            "description": "",
            "example": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/SummaryStatisticsDTO"
              }
            ]
          },
          "results": {
            "$ref": "#/components/schemas/RunResultsDto"
          }
        },
        "required": [
          "id",
          "applicationId",
          "parametersId",
          "templateName",
          "runNumber",
          "startTime",
          "endTime",
          "status",
          "summaryStatistics",
          "results"
        ]
      },
      "RunDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "applicationId": {
            "type": "string"
          },
          "runNumber": {
            "type": "number"
          },
          "startTime": {
            "type": "string"
          },
          "endTime": {
            "type": "string"
          },
          "templateName": {
            "type": "string"
          },
          "parameters": {
            "$ref": "#/components/schemas/RunTemplateData"
          },
          "status": {
            "type": "string",
            "enum": [
              "starting",
              "running",
              "paused",
              "stopping",
              "stopped"
            ]
          },
          "initialWorkQueue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkQueueItem"
            }
          },
          "summaryStatistics": {
            "$ref": "#/components/schemas/SummaryStatisticsDTO"
          },
          "user": {
            "type": "string",
            "description": "User who started the run"
          }
        },
        "required": [
          "_id",
          "applicationId",
          "runNumber",
          "startTime",
          "endTime",
          "templateName",
          "parameters",
          "status",
          "initialWorkQueue",
          "summaryStatistics",
          "user"
        ]
      },
      "PaginatedRunMetadataDTO": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "lastPage": {
            "type": "number"
          }
        },
        "required": [
          "total",
          "page",
          "lastPage"
        ]
      },
      "PaginatedRunDTO": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RunDto"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedRunMetadataDTO"
          }
        },
        "required": [
          "data",
          "metadata"
        ]
      },
      "DimensionsDTO": {
        "type": "object",
        "properties": {
          "w": {
            "type": "number",
            "description": "",
            "example": ""
          },
          "h": {
            "type": "number",
            "description": "",
            "example": ""
          }
        },
        "required": [
          "w",
          "h"
        ]
      },
      "ItemDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "type": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "data": {
            "type": "object",
            "description": "",
            "example": ""
          }
        },
        "required": [
          "id",
          "type",
          "data"
        ]
      },
      "PageDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "url": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "title": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "content": {
            "type": "object",
            "description": "",
            "example": ""
          },
          "components": {
            "description": "",
            "example": "",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dimensions": {
            "description": "",
            "example": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/DimensionsDTO"
              }
            ]
          },
          "item": {
            "description": "",
            "example": "",
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemDTO"
              }
            ]
          }
        },
        "required": [
          "id",
          "url",
          "title",
          "content",
          "components",
          "dimensions",
          "item"
        ]
      },
      "RemoveRunsResponseDTO": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "description": "If the operation was ok or not",
            "example": true
          },
          "removedRuns": {
            "description": "The ids of the removed runs",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "ok",
          "removedRuns"
        ]
      },
      "RunLogDTO": {
        "type": "object",
        "properties": {
          "runId": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "runNumber": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "entries": {
            "description": "",
            "example": "",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "runId",
          "runNumber",
          "entries"
        ]
      },
      "RunStatusDTO": {
        "type": "object",
        "properties": {
          "runId": {
            "type": "string"
          },
          "templateName": {
            "type": "string"
          },
          "runNumber": {
            "type": "number"
          },
          "applicationName": {
            "type": "string"
          },
          "startingPageTitle": {
            "type": "string"
          },
          "depth": {
            "type": "number"
          },
          "startTime": {
            "type": "string"
          },
          "endTime": {
            "type": "string"
          },
          "currentPageTitle": {
            "type": "string"
          },
          "currentPageUrl": {
            "type": "string",
            "description": "URL of the current page the Agent is on",
            "example": "https://example.com/foo/bar"
          },
          "currentComponentLabel": {
            "type": "string"
          },
          "runningState": {
            "type": "string",
            "enum": [
              "starting",
              "running",
              "paused",
              "stopping",
              "stopped"
            ]
          },
          "currentScreenshotId": {
            "type": "string"
          }
        },
        "required": [
          "runId",
          "runNumber",
          "applicationName",
          "startingPageTitle",
          "depth",
          "startTime",
          "endTime",
          "currentPageTitle",
          "currentPageUrl",
          "currentComponentLabel",
          "runningState"
        ]
      },
      "AppendRunLogRequestDTO": {
        "type": "object",
        "properties": {
          "entries": {
            "description": "",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "entries"
        ]
      },
      "WorkQueueDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "runId": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "items": {
            "description": "",
            "example": "",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "count": {
            "type": "number",
            "description": "total number of items in the work queue",
            "minimum": 0,
            "example": 8
          },
          "completedCount": {
            "type": "number",
            "description": "How many work queue items have already been tested",
            "minimum": 0,
            "example": 0
          }
        },
        "required": [
          "id",
          "runId",
          "items",
          "count",
          "completedCount"
        ]
      },
      "RunDocument": {
        "type": "object",
        "properties": {}
      },
      "LoggableAppStateDTO": {
        "type": "object",
        "properties": {
          "prevPage": {
            "type": "object"
          },
          "action": {
            "type": "object"
          },
          "page": {
            "type": "object"
          }
        },
        "required": [
          "prevPage",
          "action",
          "page"
        ]
      },
      "RunLogEntryDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": [
              "Agent",
              "Action",
              "Assertion",
              "Event",
              "Rule",
              "Selector",
              "Work",
              "Flow",
              "Performance"
            ]
          },
          "level": {
            "type": "string",
            "enum": [
              "Info",
              "Error",
              "Warning",
              "Debug"
            ]
          },
          "timestamp": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/LoggableAppStateDTO"
          },
          "msg": {
            "type": "string"
          },
          "data": {
            "type": "object"
          },
          "error": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "level",
          "timestamp",
          "state",
          "msg",
          "data"
        ]
      },
      "LogWithCount": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RunLogEntryDTO"
            }
          },
          "totalCount": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "totalCount"
        ]
      },
      "RunParameters": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "depth": {
            "type": "number",
            "default": 3
          },
          "duration": {
            "type": "number"
          },
          "stopAfterFlows": {
            "type": "boolean",
            "default": false
          },
          "enableModeling": {
            "type": "boolean",
            "default": true
          },
          "pageLoadTimeout": {
            "type": "number",
            "default": 3000
          },
          "actionRetryAttempts": {
            "type": "number",
            "default": 1
          },
          "testableDomains": {
            "description": "Domains that will be tested by the agent.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assets": {
            "$ref": "#/components/schemas/RunTemplateAssets"
          },
          "extensions": {
            "$ref": "#/components/schemas/Extensions"
          },
          "workQueue": {
            "description": "A set of work queue items for the test",
            "example": "",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PopulatedWorkQueue"
                },
                {
                  "$ref": "#/components/schemas/WorkQueueItem"
                }
              ]
            }
          },
          "name": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          }
        },
        "required": [
          "path",
          "depth",
          "testableDomains",
          "assets",
          "extensions",
          "workQueue",
          "name",
          "_id"
        ]
      },
      "StartRunRequestDTO": {
        "type": "object",
        "properties": {
          "parameters": {
            "description": "The values for the run parameters",
            "allOf": [
              {
                "$ref": "#/components/schemas/RunParameters"
              }
            ]
          }
        },
        "required": [
          "parameters"
        ]
      },
      "StartRunSuccessResponseDTO": {
        "type": "object",
        "properties": {
          "runId": {
            "type": "string",
            "description": "The id of the run",
            "example": "123"
          },
          "runNumber": {
            "type": "number"
          }
        },
        "required": [
          "runId",
          "runNumber"
        ]
      },
      "MetadataDTO": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          },
          "offset": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "hasMore": {
            "type": "boolean"
          }
        },
        "required": [
          "count",
          "offset",
          "limit",
          "hasMore"
        ]
      },
      "TransformedVariantDtos": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariantDto"
            }
          },
          "metadata": {
            "additionalProperties": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "metadata"
        ]
      },
      "VariantDataDto": {
        "type": "object",
        "properties": {
          "defaultUrl": {
            "type": "string"
          }
        }
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "_id",
          "email",
          "status"
        ]
      },
      "Parent": {
        "type": "object",
        "properties": {
          "updatedBy": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "example": "joh-doe@gmail.com",
            "description": "User's email address"
          },
          "type": {
            "type": "string",
            "example": "application",
            "description": "Entity Type"
          },
          "role": {
            "type": "number",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5
            ],
            "example": "joh-doe@gmail.com",
            "description": "User's email address"
          },
          "parent": {
            "type": "string"
          }
        },
        "required": [
          "updatedBy",
          "_id",
          "name",
          "type",
          "role",
          "parent"
        ]
      },
      "VariantDto": {
        "type": "object",
        "properties": {
          "updatedBy": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "example": "test's variant",
            "description": "The name of the variant"
          },
          "type": {
            "type": "string",
            "example": "variant",
            "description": "Entity Type"
          },
          "role": {
            "type": "number",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5
            ]
          },
          "data": {
            "description": "Variants's data",
            "allOf": [
              {
                "$ref": "#/components/schemas/VariantDataDto"
              }
            ]
          },
          "owners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDto"
            }
          },
          "parent": {
            "description": "Variant's parent (Application)",
            "allOf": [
              {
                "$ref": "#/components/schemas/Parent"
              }
            ]
          }
        },
        "required": [
          "updatedBy",
          "_id",
          "name",
          "type",
          "role",
          "data",
          "owners",
          "parent"
        ]
      },
      "Entity": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          }
        }
      },
      "Plan": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string",
            "example": "Free Plan"
          },
          "testActionsPerDay": {
            "type": "number",
            "example": 1500
          },
          "runHistoryDurationInDays": {
            "type": "number",
            "example": 14
          },
          "functionalTesting": {
            "type": "boolean",
            "example": true
          },
          "accessibilityTesting": {
            "type": "boolean",
            "example": true
          },
          "performanceTesting": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "name",
          "testActionsPerDay",
          "runHistoryDurationInDays",
          "functionalTesting",
          "accessibilityTesting",
          "performanceTesting"
        ]
      },
      "WorkspaceDataDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Workspace's data",
            "default": "inactive",
            "enum": [
              "active",
              "expired",
              "inactive"
            ]
          },
          "plan": {
            "description": "Workspace's plan",
            "default": null,
            "allOf": [
              {
                "$ref": "#/components/schemas/Plan"
              }
            ]
          },
          "subscriptionId": {
            "type": "string",
            "default": null
          }
        }
      },
      "WorkspaceDto": {
        "type": "object",
        "properties": {
          "updatedBy": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "example": "test's workspace",
            "description": "The name of the workspace"
          },
          "type": {
            "type": "string"
          },
          "role": {
            "type": "number",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5
            ]
          },
          "parent": {
            "$ref": "#/components/schemas/Entity"
          },
          "owners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDto"
            }
          },
          "data": {
            "$ref": "#/components/schemas/WorkspaceDataDto"
          },
          "lastRun": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "updatedBy",
          "_id",
          "name",
          "type",
          "role",
          "parent",
          "owners",
          "data",
          "lastRun"
        ]
      },
      "VariantData": {
        "type": "object",
        "properties": {
          "defaultUrl": {
            "type": "string"
          }
        },
        "required": [
          "defaultUrl"
        ]
      },
      "CreateVariantDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the variant"
          },
          "parentId": {
            "type": "string",
            "description": "The id referencing the application"
          },
          "data": {
            "description": "The variants data such as defaultUrl or activitySets",
            "allOf": [
              {
                "$ref": "#/components/schemas/VariantData"
              }
            ]
          }
        },
        "required": [
          "name",
          "parentId",
          "data"
        ]
      },
      "UpdateVariantDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the variant"
          },
          "data": {
            "description": "The variants data such as defaultUrl or activitySets",
            "allOf": [
              {
                "$ref": "#/components/schemas/VariantData"
              }
            ]
          }
        },
        "required": [
          "name",
          "data"
        ]
      },
      "ApplicationModelDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Equals applicationId to conform to resource DTO",
            "example": ""
          },
          "applicationId": {
            "type": "string",
            "description": "The variant this model belongs to",
            "example": ""
          },
          "nodes": {
            "description": "Nodes in the application mode",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "edges": {
            "description": "Edges in the application mode",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "applicationId",
          "nodes",
          "edges"
        ]
      },
      "ApplicationComponentDTO": {
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "id": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "type": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "name": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "data": {
            "type": "object",
            "description": "",
            "example": ""
          },
          "version": {
            "type": "integer",
            "description": "Version of the modeling algorithm used to construct this relationship.",
            "example": 1,
            "minimum": 1
          }
        },
        "required": [
          "applicationId",
          "id",
          "type",
          "name",
          "data",
          "version"
        ]
      },
      "UpdateDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "",
            "example": ""
          },
          "item": {
            "type": "object",
            "description": "",
            "example": ""
          },
          "relationship": {
            "type": "object",
            "description": "",
            "example": ""
          }
        },
        "required": [
          "type",
          "item",
          "relationship"
        ]
      },
      "ApplicationModelUpdateRequestDTO": {
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "string"
          },
          "updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateDTO"
            }
          }
        },
        "required": [
          "applicationId",
          "updates"
        ]
      },
      "CreatePageModelDTO": {
        "type": "object",
        "properties": {
          "page": {
            "type": "object",
            "description": "The page model to save"
          },
          "runId": {
            "type": "string",
            "description": "The run the page model was recorded in"
          }
        },
        "required": [
          "page",
          "runId"
        ]
      },
      "PageModelDto": {
        "type": "object",
        "properties": {
          "variantId": {
            "type": "string"
          },
          "pageId": {
            "type": "string",
            "description": "The id for the corresponding application component in the variant's application model.\n\n@note may be missing on models for older runs"
          },
          "runId": {
            "type": "string",
            "description": "The run the page model was recorded in.\n\n@note may be missing on models for older runs"
          },
          "pageTitle": {
            "type": "string"
          },
          "pageUrl": {
            "type": "string"
          },
          "screenshotId": {
            "type": "string"
          },
          "modelId": {
            "type": "string",
            "description": "Unique id for this model"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "variantId",
          "pageId",
          "runId",
          "pageTitle",
          "pageUrl",
          "screenshotId",
          "modelId",
          "createdAt",
          "updatedAt"
        ]
      },
      "PermissionResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "6398ff6875c42c6e2a417b8e"
          },
          "createdAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "resource": {
            "type": "object",
            "description": "The resource"
          },
          "user": {
            "type": "object",
            "description": "The user"
          },
          "role": {
            "type": "number",
            "example": 4,
            "description": "Role of the user for the resource"
          }
        },
        "required": [
          "_id",
          "createdAt",
          "updatedAt",
          "resource",
          "user",
          "role"
        ]
      },
      "InvitedUserPermissionDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The id referencing the user"
          },
          "resource": {
            "type": "string",
            "description": "The id referencing resource"
          },
          "role": {
            "type": "number",
            "description": "The role of the user",
            "default": "none",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5
            ]
          },
          "status": {
            "type": "string",
            "description": "The status of the invite",
            "enum": [
              "pending",
              "accepted"
            ]
          },
          "isInvite": {
            "type": "boolean",
            "description": "The user did not exist and was added to the invite collection"
          }
        },
        "required": [
          "email",
          "resource",
          "role",
          "status",
          "isInvite"
        ]
      },
      "CreatePermissionDto": {
        "type": "object",
        "properties": {
          "userRef": {
            "type": "string",
            "description": "The id or the email referencing the user"
          },
          "resource": {
            "type": "string",
            "description": "The id referencing resource"
          },
          "role": {
            "type": "number",
            "description": "The role of the user",
            "default": "none"
          }
        },
        "required": [
          "userRef",
          "resource",
          "role"
        ]
      },
      "UpdatePermissionRoleDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "number",
            "description": "The role of the user"
          }
        },
        "required": [
          "role"
        ]
      },
      "UsageDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "runId": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "workspaceId": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/WorkspaceDto"
              }
            ]
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "actionsPerformed": {
            "type": "number"
          }
        },
        "required": [
          "_id",
          "runId",
          "workspaceId",
          "date",
          "actionsPerformed"
        ]
      },
      "CreateUsageDto": {
        "type": "object",
        "properties": {
          "runId": {
            "type": "string"
          },
          "actionsPerformed": {
            "type": "number"
          }
        },
        "required": [
          "runId",
          "actionsPerformed"
        ]
      },
      "AnalyticsFilterDTO": {
        "type": "object",
        "properties": {
          "runId": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Only include results from a specific run, or a set of runs"
          },
          "ruleId": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Filter for one or more rules by id"
          },
          "ruleType": {
            "type": "string",
            "enum": [
              "accessibility-rule",
              "functional-rule",
              "resource-rule",
              "webform-rule",
              "link-rule"
            ]
          },
          "pageId": {
            "type": "string"
          },
          "componentId": {
            "type": "string"
          },
          "componentType": {
            "type": "string",
            "enum": [
              "Iframe",
              "Body",
              "Header",
              "Footer",
              "Navbar",
              "Form",
              "Button",
              "Anchor",
              "Input",
              "Content",
              "Section",
              "Select",
              "Option",
              "Table",
              "Table Header",
              "Table Body",
              "Table Footer",
              "Table Row",
              "Table Header Cell",
              "Table Data Cell",
              "Large Heading",
              "Medium Heading",
              "Small Heading",
              "Webform",
              "Label",
              "Field",
              "Checkbox Cluster",
              "Radio Group",
              "Radio",
              "Checkbox",
              "Select Option",
              "Text Area",
              "Text Node",
              "Image",
              "Icon",
              "Grid",
              "Grid Item",
              "List",
              "List Item",
              "Unclassified"
            ]
          }
        }
      },
      "AnalyticsRequestDTO": {
        "type": "object",
        "properties": {
          "filter": {
            "description": "Filters to apply to run logs before aggregating",
            "allOf": [
              {
                "$ref": "#/components/schemas/AnalyticsFilterDTO"
              }
            ]
          },
          "groupBy": {
            "description": "The fields to group by",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "populate": {
            "description": "Populate certain fields by joining with other collections.\n\nValues in this list must be a subset of `groupBy`, and can only\napply to id fields. Instead of containing\nan ObjectId, populated fields will contain the document the id\nrefers to.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "filter",
          "groupBy"
        ]
      },
      "AnalyticsDTO": {
        "type": "object",
        "properties": {
          "passed": {
            "type": "number",
            "description": "The number of rules that passed"
          },
          "failed": {
            "type": "number",
            "description": "The number of rules that failed"
          },
          "total": {
            "type": "number",
            "description": "The total number of rules, components, pages, etc. Includes tested and untested entities"
          },
          "tested": {
            "type": "number",
            "description": "The number of tests that ran. Equal to `passed + failed`"
          },
          "runId": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "ruleId": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "ruleType": {
            "type": "string",
            "enum": [
              "accessibility-rule",
              "functional-rule",
              "resource-rule",
              "webform-rule",
              "link-rule"
            ]
          },
          "pageId": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "componentId": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "componentType": {
            "type": "string",
            "enum": [
              "Iframe",
              "Body",
              "Header",
              "Footer",
              "Navbar",
              "Form",
              "Button",
              "Anchor",
              "Input",
              "Content",
              "Section",
              "Select",
              "Option",
              "Table",
              "Table Header",
              "Table Body",
              "Table Footer",
              "Table Row",
              "Table Header Cell",
              "Table Data Cell",
              "Large Heading",
              "Medium Heading",
              "Small Heading",
              "Webform",
              "Label",
              "Field",
              "Checkbox Cluster",
              "Radio Group",
              "Radio",
              "Checkbox",
              "Select Option",
              "Text Area",
              "Text Node",
              "Image",
              "Icon",
              "Grid",
              "Grid Item",
              "List",
              "List Item",
              "Unclassified"
            ]
          },
          "runLogId": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "runLogNumber": {
            "type": "number"
          }
        },
        "required": [
          "passed",
          "failed",
          "total",
          "tested"
        ]
      },
      "AnalyticsResultsDTO": {
        "type": "object",
        "properties": {
          "analytics": {
            "description": "Analytics results. Shape is determined by `groupBy` and `populate`.\n\nEach result contains `passed`, `failed`, and `total` rule results\nfor the desired aggregation, as well as properties for each `groupBy`.\nPopulated fields (specified by `populate`) will contain documents from\ntheir respective, collections instead of an ObjectId or a UUID.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalyticsDTO"
            }
          }
        },
        "required": [
          "analytics"
        ]
      },
      "PagePerformanceDTO": {
        "type": "object",
        "properties": {
          "runId": {
            "type": "string"
          },
          "applicationId": {
            "type": "string"
          },
          "pageId": {
            "type": "string"
          },
          "n": {
            "type": "number",
            "description": "Number of times statistics were collected for this page"
          },
          "ttl": {
            "type": "number",
            "description": "Time to load (TTL) in milliseconds"
          },
          "lcp": {
            "type": "number",
            "description": "Largest Contentful Paint (LCP) in milliseconds"
          },
          "loadTime": {
            "type": "number",
            "description": "Total page load time in milliseconds"
          },
          "fcp": {
            "type": "number",
            "description": "First Contentful Paint (FCP) in milliseconds"
          },
          "tti": {
            "type": "number",
            "description": "Time to Interactive (TTI) in milliseconds"
          },
          "cls": {
            "type": "number",
            "description": "Cumulative Layout Shift (CLS) score"
          }
        },
        "required": [
          "runId",
          "applicationId",
          "pageId",
          "n",
          "ttl",
          "lcp",
          "loadTime",
          "fcp",
          "tti",
          "cls"
        ]
      },
      "PerformanceResultsDTO": {
        "type": "object",
        "properties": {
          "analytics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PagePerformanceDTO"
            }
          },
          "count": {
            "type": "number",
            "description": "The total number of results that match the query"
          }
        },
        "required": [
          "analytics",
          "count"
        ]
      },
      "TransformedTagDTOS": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagDTO"
            }
          },
          "metadata": {
            "additionalProperties": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "metadata"
        ]
      },
      "TransformedTagWithPopulatedParentDTOS": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagWithPopulatedParentDTO"
            }
          },
          "metadata": {
            "additionalProperties": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "metadata"
        ]
      },
      "CreateTagDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Performance",
            "description": "The name of the tag"
          },
          "parent": {
            "type": "string",
            "description": "The id referencing the parent"
          },
          "type": {
            "type": "string",
            "example": "custom",
            "description": "The type of the tag. custom, core, default"
          }
        },
        "required": [
          "name",
          "parent",
          "type"
        ]
      },
      "TagDTO": {
        "type": "object",
        "properties": {
          "updatedBy": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "_id": {
            "type": "string",
            "example": "6398ff6875c42c6e2a417b8e"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "default",
              "custom",
              "core"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ]
          },
          "color": {
            "type": "string"
          },
          "parent": {
            "description": "The id referencing the application the asset belongs to",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ResourceDto"
              }
            ]
          }
        },
        "required": [
          "updatedBy",
          "_id",
          "name",
          "type",
          "status",
          "parent"
        ]
      },
      "TransformedTagDTO": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TagDTO"
          },
          "metadata": {
            "additionalProperties": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "metadata"
        ]
      },
      "UpdateTagDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "An unique identifier for the tag",
            "example": "6399004470fd609bc8b30338"
          },
          "name": {
            "type": "string",
            "description": "The name of the tag"
          }
        },
        "required": [
          "_id",
          "name"
        ]
      },
      "UpdateTagParentDTO": {
        "type": "object",
        "properties": {
          "newParent": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "newParent",
          "name"
        ]
      },
      "TagWithPopulatedParentDTO": {
        "type": "object",
        "properties": {
          "updatedBy": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "_id": {
            "type": "string",
            "example": "6398ff6875c42c6e2a417b8e"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "default",
              "custom",
              "core"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ]
          },
          "color": {
            "type": "string"
          },
          "parent": {
            "description": "The id referencing the application the asset belongs to",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceDto"
              }
            ]
          }
        },
        "required": [
          "updatedBy",
          "_id",
          "name",
          "type",
          "status",
          "parent"
        ]
      },
      "TransformedTagWithPopulatedParentDTO": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TagWithPopulatedParentDTO"
          },
          "metadata": {
            "additionalProperties": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "metadata"
        ]
      },
      "TransformedApplicationDtos": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationDto"
            }
          },
          "metadata": {
            "additionalProperties": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "metadata"
        ]
      },
      "ApplicationDto": {
        "type": "object",
        "properties": {
          "updatedBy": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "example": "joh-doe@gmail.com",
            "description": "User's email address"
          },
          "type": {
            "type": "string",
            "example": "application",
            "description": "Entity Type"
          },
          "role": {
            "type": "number",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5
            ],
            "example": "joh-doe@gmail.com",
            "description": "User's email address"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          },
          "owners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDto"
            }
          }
        },
        "required": [
          "updatedBy",
          "_id",
          "name",
          "type",
          "role",
          "parent",
          "owners"
        ]
      },
      "TransformedApplicationDto": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApplicationDto"
          },
          "metadata": {
            "additionalProperties": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "metadata"
        ]
      },
      "CreateApplicationDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the application"
          },
          "parentId": {
            "type": "string",
            "description": "The id referencing the workspace"
          }
        },
        "required": [
          "name",
          "parentId"
        ]
      },
      "UpdateApplicationDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the application"
          }
        },
        "required": [
          "name"
        ]
      },
      "IssueDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "logs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "description",
          "severity",
          "status",
          "logs"
        ]
      },
      "CreatePatDTO": {
        "type": "object",
        "properties": {
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the PAT will expire and can no longer be used for authentication.\n\n\t\tBy default, PATs expire after 1 year. To create a PAT that never expires,\n\t\texplicitly set this field to `null`.",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "name": {
            "type": "string",
            "description": "The name of the PAT. Helps distinguish between PATs and to remember their purpose. For display purposes only. "
          }
        },
        "required": [
          "expiresAt",
          "name"
        ]
      },
      "CreatePatResponseDTO": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "user": {
            "type": "string",
            "description": "user id"
          },
          "lastUsed": {
            "format": "date-time",
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "apiKey",
          "name",
          "expiresAt",
          "_id",
          "user",
          "lastUsed",
          "createdAt",
          "updatedAt"
        ]
      },
      "PatDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "user": {
            "type": "string",
            "description": "user id"
          },
          "lastUsed": {
            "format": "date-time",
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "name",
          "expiresAt",
          "_id",
          "user",
          "lastUsed",
          "createdAt",
          "updatedAt"
        ]
      },
      "UserWorkspace": {
        "type": "object",
        "properties": {
          "updatedBy": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "example": "test's workspace",
            "description": "The name of the workspace"
          },
          "type": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/WorkspaceDataDto"
          },
          "parent": {
            "type": "string"
          }
        },
        "required": [
          "parent"
        ]
      },
      "UserWithWorkspaces": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "workspaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserWorkspace"
            }
          }
        },
        "required": [
          "_id",
          "email",
          "status",
          "workspaces"
        ]
      },
      "PaginatedUserMetadataDto": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "offset": {
            "type": "number"
          }
        },
        "required": [
          "count",
          "limit",
          "offset"
        ]
      },
      "PaginatedUserDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserWithWorkspaces"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginatedUserMetadataDto"
          }
        },
        "required": [
          "data",
          "metadata"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email that identifies the user"
          },
          "externalId": {
            "type": "string",
            "description": "The email that identifies the user"
          },
          "customerId": {
            "type": "string",
            "description": "The email that identifies the user"
          }
        }
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email that identifies the user"
          },
          "externalId": {
            "type": "string",
            "description": "The email that identifies the user"
          },
          "customerId": {
            "type": "string",
            "description": "The email that identifies the user"
          }
        },
        "required": [
          "email",
          "externalId",
          "customerId"
        ]
      },
      "TransformedWorkspaceDtos": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkspaceDto"
            }
          },
          "metadata": {
            "additionalProperties": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "metadata"
        ]
      },
      "TransformedWorkspaceDto": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkspaceDto"
          },
          "metadata": {
            "additionalProperties": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "metadata"
        ]
      },
      "CreateWorkspaceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "test's workspace",
            "description": "The name of the workspace"
          },
          "plan": {
            "type": "string",
            "example": "free",
            "description": "The name of the workspace's plan",
            "enum": [
              "free",
              "plus",
              "pro",
              "enterprise",
              "unlimited"
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "DefaultResponseDto": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean"
          },
          "msg": {
            "type": "string"
          }
        },
        "required": [
          "ok",
          "msg"
        ]
      },
      "TransformedDefaultResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DefaultResponseDto"
          },
          "metadata": {
            "additionalProperties": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataDTO"
              }
            ]
          }
        },
        "required": [
          "data",
          "metadata"
        ]
      },
      "UpdateWorkspaceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "test's workspace",
            "description": "The name of the workspace"
          },
          "plan": {
            "type": "string",
            "example": "free",
            "description": "The name of the workspace's plan",
            "enum": [
              "free",
              "plus",
              "pro",
              "enterprise",
              "unlimited"
            ]
          }
        }
      },
      "InviteUserDTO": {
        "type": "object",
        "properties": {
          "resource": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/WorkspaceDto"
              },
              {
                "$ref": "#/components/schemas/ApplicationDto"
              },
              {
                "$ref": "#/components/schemas/VariantDto"
              }
            ]
          },
          "email": {
            "type": "string"
          },
          "role": {
            "type": "number",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5
            ]
          },
          "status": {
            "type": "string",
            "description": "The status of the invite",
            "enum": [
              "pending",
              "accepted"
            ]
          }
        },
        "required": [
          "email",
          "status"
        ]
      },
      "CreateUserInvitationDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the user"
          },
          "resource": {
            "type": "string",
            "description": "The id referencing resource"
          },
          "role": {
            "type": "number",
            "description": "The role of the user for the given resource",
            "default": "none"
          }
        },
        "required": [
          "email",
          "resource",
          "role"
        ]
      },
      "EntityResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "6398ff6875c42c6e2a417b8e"
          },
          "createdAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "name": {
            "type": "string",
            "example": "joh-doe@gmail.com",
            "description": "User's email address"
          },
          "type": {
            "type": "string",
            "example": "instance",
            "description": "Entity Type",
            "enum": [
              "instance",
              "workspace",
              "application",
              "variant"
            ]
          },
          "role": {
            "type": "number",
            "example": "joh-doe@gmail.com",
            "description": "User's email address",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5
            ]
          },
          "parent": {
            "type": "object",
            "description": "The system does not have a parent"
          }
        },
        "required": [
          "_id",
          "createdAt",
          "updatedAt",
          "name",
          "type",
          "role",
          "parent"
        ]
      },
      "ViewConfigDTO": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "object",
            "description": "The filters configuration of the view"
          },
          "groupBy": {
            "type": "object",
            "description": "The group configuration of the view"
          },
          "sort": {
            "type": "string",
            "enum": [
              "parent",
              "name",
              "status",
              "location",
              "link-rule",
              "rule_type"
            ],
            "description": "The sort configuration of the view"
          },
          "columnVisibility": {
            "type": "object",
            "description": "The column visibility configuration of the view"
          },
          "columnOrder": {
            "description": "The column order configuration of the view",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ViewDTO": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "example": "Errors",
            "description": "The name of the workspace"
          },
          "parentId": {
            "type": "string",
            "description": "The parent of the view, usually the workspaceId"
          },
          "url": {
            "type": "string",
            "description": "The url the view should be displayed"
          },
          "config": {
            "description": "The configuration of the view",
            "allOf": [
              {
                "$ref": "#/components/schemas/ViewConfigDTO"
              }
            ]
          },
          "viewNumber": {
            "type": "number",
            "description": "The view number"
          }
        },
        "required": [
          "_id",
          "name",
          "parentId",
          "url",
          "config",
          "viewNumber"
        ]
      },
      "CreateViewDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Errors",
            "description": "The name of the workspace"
          },
          "parentId": {
            "type": "string",
            "description": "The parent of the view, usually the workspaceId"
          },
          "url": {
            "type": "string",
            "description": "The url the view should be displayed"
          },
          "config": {
            "description": "The configuration of the view",
            "allOf": [
              {
                "$ref": "#/components/schemas/ViewConfigDTO"
              }
            ]
          }
        },
        "required": [
          "name",
          "parentId",
          "url",
          "config"
        ]
      },
      "UpdateViewDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Errors",
            "description": "The name of the workspace"
          },
          "parentId": {
            "type": "string",
            "description": "The parent of the view, usually the workspaceId"
          },
          "url": {
            "type": "string",
            "description": "The url the view should be displayed"
          },
          "config": {
            "description": "The configuration of the view",
            "allOf": [
              {
                "$ref": "#/components/schemas/ViewConfigDTO"
              }
            ]
          }
        }
      }
    }
  }
}